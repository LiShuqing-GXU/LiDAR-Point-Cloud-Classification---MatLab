%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear;
parpool(12)
tic

format long
filename='test.txt';

M = dlmread(filename);
[aa1,aa2]=size(M);
aa1
aa2

linear=[];
planer=[];
volumetric=[];

n=71;
 Mdl = KDTreeSearcher(M);
 [row1,dis]=knnsearch(Mdl,M,'k',n);
 D = zeros(3,size(M,1));
row1(:,1)=[];

EE = sparse(3,size(M,1));

parfor i=1:size(M,1)

     LSP(i)= PCA_Func_LSP(M(row1(i,:),:),dis(i,n));

end


parfor i=1:size(M,1)

     [D(:,i),EE(:,i)] = PCA_Func_Radius(M,i,row1(i,:),LSP(i));

end
save Data1 D



%  lin=M(linear,:);
 lin = M(find(EE(1,:)),:);
 lin(:,end+1)=1;
 
 % plan=[planer M(planer,:)];
%  plan=M(planer,:);
 plan = M(find(EE(2,:)),:);
 plan(:,end+1)=2;
 % Vol=[volumetric M(volumetric,:)];
%  Vol=M(volumetric,:);
 Vol = M(find(EE(3,:)),:);
 Vol(:,end+1)=3;
 
 dlmwrite('linear_M.txt' ,lin,'precision','%.10f', 'delimiter', ' ', 'newline','pc');
 dlmwrite('planimetry_M.txt',plan,'precision','%.10f', 'delimiter', ' ', 'newline','pc');
 dlmwrite('Volumetric_M.txt',Vol,'precision','%.10f', 'delimiter', ' ', 'newline','pc');
time1= toc;
save sim_time time1 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [LSP] = PCA_Func_LSP(M,dis) 

   n=71; 
        MM=[M(:,1),M(:,2),M(:,3)];
        [~,~,latent] = princomp(MM);
        l=sqrt(latent);
        D = zeros(3,1);
    D(1)= (l(1)-l(2))/l(1);
    D(2)=(l(2)-l(3))/l(1);
    D(3)=l(3)/l(1);

    if ((D(1)>D(2)) && (D(1)>D(3)))
        LPD= n/(2*dis);
        LSP=1/LPD;
    end
    
    if ((D(2)>D(1)) && (D(2)>D(3)))
       LPD = n/pi*(dis)^2;
        LSP=1/(sqrt(LPD));
    end
    
   if ((D(3)>D(1)) && (D(3)>D(2)))
       LPD= n/((4/3)*pi*(dis)^3);
        LSP=1/(nthroot(LPD,3));
   end


end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [D,EE] = PCA_Func_Radius(M,i,tmp,LSP) 
    tmp1=[];
    r=4*LSP;
     for j=1:size(M)
        
        
        S=sqrt(M(i,1)-M(j,1))^2+(M(i,2)-M(j,2))^2+(M(i,3)-M(j,3)^2);
        
      if (S<=r && S > 0)
         tmp1=[tmp1;j];
      end
     end
    
    MM=[M(tmp,1),M(tmp,2),M(tmp,3)];
    [~,~,latent] = princomp(MM);
    l=sqrt(latent);
    D(1)= (l(1)-l(2))/l(1);
    D(2)=(l(2)-l(3))/l(1);
    D(3)=l(3)/l(1);

    EE = sparse(3,1);
    if ((D(1)>D(2)) && (D(1)>D(3)))
        EE(1,1)=1;
    
    elseif ((D(2)>D(1)) && (D(2)>D(3)))
       EE(2,1)=1;
    
    elseif ((D(3)>D(1)) && (D(3)>D(2)))
       EE(3,1)=1;
       
    else
        EE(4,1)=1;

    end
end